
as12, an absolute assembler for Motorola MCU's, version 1.2h

                        ; Array_Fun.asm
                        ; Author: D. Haley, Faculty, 26 Nov 2021
                        ;
                        ; Student Name(s):      < Shahram Ahmad  &&  Wahid Abdul Rahim >
                        ; Student Number(s):    <   040971488    &&      040985017     >
                        ; Lab Section(s):       <      301       &&         302        >
                        ; Modification Date:    <          December 10 2021            >
                        ;
                        ;
                        ; Purpose:      The purpose of this program is to gain further experience with
                        ;               the use of Arrays in 68HCS12 Assembly Language by performing
                        ;               the following Tasks:
                        ;
                        ;               a. Determine the Maximum value in the Array and store the
                        ;                  value at Max
                        ;               b. Determine the Minumum value in the Array and store the
                        ;                  value at Min
                        ;               c. Using the value stored at Max, determine how often that
                        ;                  value occurs in the Array and store that value at NumMax
                        ;               d. Using the value stored at Min, determine how often that
                        ;                  value occurs in the Array and store that value at NumMin
                        ;               e. Range tells how far apart the Max and Min numbers are in a set
                        ;                  It is the positive difference between the two values
                        ;                  Using the values in Max and Min, subtract those two
                        ;                  values a store the result at Range
                        ;               f. MidRange is the Average of the Range - e.g. Range / 2
                        ;                  Using the Values of Range and DIVISOR, calculate the
                        ;                  MidRange using idiv (mandatory) and store an 8-bit version of
                        ;                  the Answer at MidRange and an 8-bit version of the Reminder
                        ;                  at MidRange+1
                        ;               g. Display NumMax and NumMin on the two right-most HEX Displays
                        ;                  (like you did with the Counter), alternating their
                        ;                  displayed values every 250 ms. This coding is provided for you.
                        ;                  NOTE: API.s19 must be loaded in order for this feature to work.
                        ;               h. Code must run correctly for more than one program run
                        ;                  e.g. File -> Reset, the GO on Simulator must give same results
                        
                        ; --- Do Not Change Code marker ---
                        ; Library Routines used in this software
                        ;
2117                    Config_Hex_Displays         equ        $2117
211f                    Delay_Ms                    equ        $211F
2139                    Hex_Display                 equ        $2139
                        
                                                        ; Port P (PPT) Display Selection Values
000b                    DIGIT1_PP2      equ     %1011   ; 2nd from Right-most display MSB
0007                    DIGIT0_PP3      equ     %0111   ; Right-most display LSB
                        
                        ; Delay Subroutine Values
00fa                    DVALUE  equ     #250            ; Delay value (base 10) 0 - 255 ms
                                                        ; 125 = 1/8 second <- good for Dragon12 Board
                        
0002                    DIVISOR equ     $02
                        
1000                            org     $1000
1000                    Array
                        #include 21F_Array.txt
                        
1000 24 40 f0 c3 f4 02  	db	$24,$40,$F0,$C3,$F4,$02,$C3,$E5
     c3 e5
1008 02 f3 65 aa 56 f3  	db	$02,$F3,$65,$AA,$56,$F3,$F3,$B0
     f3 b0
1010 f3 d6 01 03 0e 3e  	db	$F3,$D6,$01,$03,$0E,$3E,$40,$CC
     40 cc
1018 03 08 f3 f0 31 02  	db	$03,$08,$F3,$F0,$31,$02,$40,$01
     40 01
1020 01 f3 65 aa 56 f3  	db	$01,$F3,$65,$AA,$56,$F3,$F4,$B0
     f4 b0
1028 24 40 f0 c3 a0 02  	db	$24,$40,$F0,$C3,$A0,$02,$C3,$E5
     c3 e5
                        #endinclude

1030                    EndArray
                        
1030                            org     $1030
1030                    Max     ds      1
1031                    Min     ds      1
                        
1040                            org     $1040
1040                    NumMax  ds      1
1041                    NumMin  ds      1
                        
1050                            org     $1050
1050                    Range           ds      1
1051                    MidRange        ds      2
                        
2000                            org     $2000
2000 cf 20 00                   lds     #$2000
                        
                        ; --- End of Do Not Change Code marker ---
                        
                        ; your code goes here (as many lines at it takes)
2003 ce 10 00                   ldx     #Array          ; Loading register (x) with the memory address of the Array.txt file, which will point to the zeroth index.
2006 79 10 41                   clr     NumMin          ; Clearing the value of NumMax so it resets on every run.
2009 79 10 40                   clr     NumMax          ; Clearing the value of NumMax so it resets on every run.
200c a6 00                      ldaa    0,x             ; Loading accumulator (a) with the value at memory address (x) which points to Array.txt and it's $1000.
200e 7a 10 31                   staa    Min             ; Storing into accumulator (a) the value thats at Min.
                        ; goes through Array, finds Max and Min. also finds the range. also, puts the sum of Array into A.
2011 8e 10 30           Start   cpx     #EndArray       ; Checks to see if we've reached the end of the array.
2014 18 27 00 14                lbeq    Next            ; If we reached the end of the array, goes to the next step of the assigment.
2018 e6 30                      ldab    1,x+            ; Loads b with the next value of the array then, has x incrment by 1.
201a f1 10 30                   cmpb    Max             ; Compares B with whats in Max.
201d 25 03                      blo     cmpMIN          ; If B is lower, does nothing and goes to cmpMIN.
201f 7b 10 30                   stab    Max             ; If B is greater, replaces whats in Max with B.
2022 f1 10 31           cmpMIN  cmpb    Min             ; Compares B with whats in Min.
2025 22 ea                      bhi     Start           ; If B is greater, does nothing and goes back to the start of the loop.
2027 7b 10 31                   stab    Min             ; If B is lower, replaces whats in Min with B.
202a 20 e5                      bra     Start           ; Brances back to the start of the loop.
                        ; goes through the array and counts the number of min and max occurences.
202c ce 10 00           Next    ldx     #Array          ; Reloads X with the adderess of the Array.
202f 8e 10 30           Start2  cpx     #EndArray       ; Checks to see if we've reached the end of the array.
2032 18 27 00 14                lbeq    Next2           ; If we reached the end of the array, goes to the next step of the assigment.
2036 e6 30                      ldab    1,x+            ; Loads b with the next value of the array then, has x incrment by 1.
2038 f1 10 31                   cmpb    Min             ; Compares B with whats in Min.
203b 26 03                      bne     IMAX            ; if B is not equal to Min, does nothing and goes to IMAX.
203d 72 10 41                   inc     NumMin          ; incrementing NumMin to get the total amount of times the NumMin is repeated.
2040 f1 10 30           IMAX    cmpb    Max             ; Compares B with whats in Max.
2043 26 ea                      bne     Start2          ; if B is not equal to Max, does nothing and goes back to the start of the loop.
2045 72 10 40                   inc     NumMax          ; Incrementing NumMax to get the total amount of times the NumMax is repeated.
2048 20 e5                      bra     Start2          ; Brances back to the start of the loop.
                        ; finds the range, mid-Range and mid-rage-quotiont
204a 86 00              Next2   ldaa    #0              ; Loading accumulator (a) with the value 0 as to not interfear with whats in (D).
204c f6 10 30                   ldab    Max             ; Loading accumulator (b) with the value at Max.
204f f0 10 31                   subb    Min             ; (b) is now containing the value Max. Subtracting the value at accumulator (b) with the value at Min.
2052 7b 10 50                   stab    Range           ; Stores (b) in Range and (b) now becomes our range.
2055 ce 00 02                   ldx     #DIVISOR        ; Loads X with DIVISOR (2).
2058 18 10                      idiv                    ; Divides whats in D by whats in X. stores the result in X, stores the remainder in D.
205a 7b 10 52                   stab    MidRange+1      ; Storing the Last 8 bits of D (B). into MidRange+1 which is MidRangeQuotient as per assignment instructions.
205d b7 54                      tfr     x,d             ; Transferring the values from register (x) to register (d) because (x) contains the answer.
205f 7b 10 51                   stab    MidRange        ; Storing the Last 8 bits of D (B) into MidRange.
                        
                        ; --- Do Not Change Code marker ---
                        
                                ; Output Results to Hex Displays
                        
                                ; NOTE 1 : API.s19 must be loaded in order for this feature
                                ; NOTE 2 : Once you STOP the execution of the code in simulator,
                                ;          you will be able to see the calculated values in memory
                                ;          at the memory locations specified in the assignment.
                        
2062 16 21 17                   jsr     Config_HEX_Displays ; Use the Hex Displays to display the count
2065 b6 10 40           Display ldaa    NumMax
2068 c6 0b                      ldab    #DIGIT1_PP2     ; select 2nd from Right Most HEX Display
206a 16 21 39                   jsr     HEX_Display     ; Display the value
206d 86 fa                      ldaa    #DVALUE         ; delay for DVALUE milliseconds
206f 16 21 1f                   jsr     Delay_ms
2072 b6 10 41                   ldaa    NumMin
2075 c6 07                      ldab    #DIGIT0_PP3     ; select Right Most HEX Display
2077 16 21 39                   jsr     HEX_Display     ; Display the value
207a 86 fa                      ldaa    #DVALUE         ; delay for DVALUE milliseconds
207c 16 21 1f                   jsr     Delay_ms
207f 20 e4                      bra     Display
2081 3f                         swi
                                end
                        ; --- End of Do Not Change Code marker ---
                        
                        
                        
                        

Executed: Wed Dec 15 16:37:49 2021
Total cycles: 177, Total bytes: 178
Total errors: 0, Total warnings: 0
